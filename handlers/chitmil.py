from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import Command
from states import ChitmilStates
from db.crud import save_chitmil_data


router = Router()

@router.message(Command("chitmil"), state=default_state)
async def start_chitmil(message: types.Message, state: FSMContext):
    await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–µ–±–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?")
    await state.set_state(ChitmilStates.what_allow)

@router.message(ChitmilStates.what_allow)
async def get_what_allow(message: types.Message, state: FSMContext):
    await state.update_data(what_allow=message.text)
    await message.answer("–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º —ç—Ç–æ—Ç –¥–µ–Ω—å?")
    await state.set_state(ChitmilStates.day_name)

@router.message(ChitmilStates.day_name)
async def get_day_name(message: types.Message, state: FSMContext):
    await state.update_data(day_name=message.text)
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥? (–≤ –¥–Ω—è—Ö)")
    await state.set_state(ChitmilStates.period)

@router.message(ChitmilStates.period)
async def get_period(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(period=int(message.text))
    await message.answer("–•–æ—á–µ—à—å –ª–∏, —á—Ç–æ–±—ã –ø–µ—Ä–∏–æ–¥ —É–≤–µ–ª–∏—á–∏–≤–∞–ª—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(ChitmilStates.increase)

@router.message(ChitmilStates.increase)
async def get_increase(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    increase = message.text.lower() in ["–¥–∞", "yes", "y"]
    user_data["increase"] = increase

    summary = (
        f"üìã –í–æ—Ç —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª:\n"
        f"‚Äî –†–∞–∑—Ä–µ—à–∏—Ç—å: {user_data['what_allow']}\n"
        f"‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è: {user_data['day_name']}\n"
        f"‚Äî –ü–µ—Ä–∏–æ–¥: {user_data['period']} –¥–Ω–µ–π\n"
        f"‚Äî –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥: {'–î–∞' if increase else '–ù–µ—Ç'}"
    )
    await save_chitmil_data(message.from_user.id, user_data)
    await message.answer(summary)
    await state.clear()

@router.message(Command("my_chitmils"))
async def show_user_chitmils(message: types.Message):
    from db.crud import get_user_chitmils

    entries = await get_user_chitmils(message.from_user.id)

    if not entries:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìã –¢–≤–æ–∏ Chitmil –∑–∞–ø–∏—Å–∏:\n\n"
    for entry in entries:
        text += (
            f"üóì {entry.day_name} ‚Äî {entry.what_allow}\n"
            f"‚è≥ –ü–µ—Ä–∏–æ–¥: {entry.period} –¥–Ω–µ–π\n"
            f"üîÅ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: {'–î–∞' if entry.increase else '–ù–µ—Ç'}\n\n"
        )

    await message.answer(text.strip())